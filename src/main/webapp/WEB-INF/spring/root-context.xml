<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd">
    <!-- 모든 컨텍스트에서 공유되어 사용됨
    뷰와 관련없는 빈 객체를 설정 ex)서비스, 저장소, 데이터베이스, 로그 등 비지니스 로직을 위한 컨텍스트를 설정-->

    <!-- jdbc property : 현재 파일에만 속성값 적용 -->
    <context:property-placeholder
            location="/WEB-INF/jdbc.properties" />

    <!-- jdbc properties : 모든 파일에 속성값 적용 -->
    <util:properties id="jdbc"
                     location="/WEB-INF/jdbc.properties" />

    <!-- 외부 클래스는 bean 태그를 사용해야 쓸 수 있다. 내가만든건 어노테이션으로도 가능
    커넥션 풀을 이용하여 DataSource 설정하기
    스프링에서 제공하는 DriverManagerDataSource 가 있지만 커넥션풀을 지원하지 않아
    여러 요청을 감당하지 못한다
    대신 Apache Jakarta Commons DBCP API 를 이용한다
    DriverManagerDataSource 와 마찬가지로 DataSource 인터페이스의 구현체이다
    드라이버를 로드하고 데이터베이스에 접속해 커넥션 객체를 받아오는 일을 DataSource 가 다 하는 것임-->
    <!-- dbcp datasource -->
    <bean id="dbcpDataSource"
          class="org.apache.commons.dbcp2.BasicDataSource"
          p:driverClassName="${DRV}" p:url="${URL}"
          p:username="${USR}" p:password="${PWD}" />

    <!-- 데이터베이스 연결을 위한 설정이 끝나면 jdbcTemplate 빈 객체를 등록하며 이것이 dbcpDataSource 를 참조하도록 설정 -->
    <!-- jdbc template -->
    <bean id="jdbcTemplate"
          class="org.springframework.jdbc.core.JdbcTemplate"
          p:dataSource="dataSource"
          p:dataSource-ref="dbcpDataSource" />
</beans>